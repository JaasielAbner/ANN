# import random
import math
import matplotlib.pyplot as plt
import numpy as np

def prod(lst):
   p = 1
   for i in lst:
      p *= i
   return p

def diferenca_finita(xs, ordem, x0, f):
   a = []
   b = []
   n = len(xs)
   for i in range(n):
      #para construir a matriz A
      a.append([0] * n)
      for j in range(n):
         a[i][j] = xs[j] ** i
      #para construir a matriz B
      potencias = [k + 1 for k in range(i - ordem,i)]
      fatorial = 0 if i < ordem else prod(potencias)
      termo = fatorial * x0 ** (i - ordem)
      b.append(termo)
   a = np.array(a, dtype='float')
   b = np.array(b, dtype='float')
   cs = np.linalg.solve(a, b)
   # construir a soma que da a aproximacao
   # f^k(x0) ~ c0 * f(x0) + c1 * f(x1) + ... + cn * f(xn)
   soma = 0
   for ck, xk in zip(cs, xs):
      soma += ck * f(xk)
   return soma


if __name__ == "__main__":
   x0 = 7.7871
   x = [7.5402, 7.7025, 7.7641, 7.8701, 7.9322, 7.971]
   ordem = 3
   
   def f(x):
      return 3 * math.cos((x**2-1)**(1/3))

#--------------------------------------------------------------------------

   r = diferenca_finita(x, ordem, x0, f)
   #print(xs)
   print(f'aproximacao para a derivada de ordem {ordem} de f no ponto {x0} = ', r)

#--------------------------------------------------------------------------
#EX P2.4
   # def f(x):
   #    return math.e**(math.cos(x)**2) + math.e**-(x**2) + math.log(x)

   # x0 = 6.1647262
   # xs = [5.1647262, 5.4147262, 5.6647262, 5.9147262, 6.1647262, 6.4147262, 6.6647262, 6.9147262]
   # ordem = 2

   # def f(x):
   #    return x ** x
   # x0 = 2
   # ordem = 1
   # #pontos para construir a formula
   # n_pontos = 60
   # a = x0 - 0.25
   # b = x0 + 0.25
   # xs = [a + (b - a) * random.random() for _ in range(n_pontos)]
   # xs.sort()

#--------------------------------------------------------------------------
#EX 34
   # def f(x):
   #    return (x**2)*math.e**(-x)*math.cos(x) + 1

   # xs = [1.6982005, 2.251748, 2.8052955]
   # x0 = 2.251748
   # ordem = 1
#--------------------------------------------------------------------------
#--------------------------------------------------------------------------
#EX 35
   # def f(x):
   #    return math.cos(x)**3 + 2*math.cos(x)**2 + 1

   # x0 = -1.4536933
   # xs = [-2.9969104, -1.6217422, 0.164922, 1.5679596, 4.1997959]
   # ordem = 1
#--------------------------------------------------------------------------
#--------------------------------------------------------------------------
#EX 36
   # def f(x):
   #    return math.e**(-x**2) + math.cos(x) + 3

   # x0 = 2.52694
   # xs = [1.7491622, 1.9436067, 2.1380511, 2.3324956, 2.52694, 2.7213844, 2.9158289, 3.1102733, 3.3047178]
   # ordem = 1
#--------------------------------------------------------------------------
#--------------------------------------------------------------------------
#EX 37
   # def f(x):
   #    return math.sqrt(math.cos(x**2) + x)

   # x0 = 2.2051288
   # xs = [0.9082705, 2.1224353, 3.1849182, 4.3818363]
   # ordem = 2
#--------------------------------------------------------------------------
#--------------------------------------------------------------------------
#EX 38
   # def f(x):
   #    return math.e**(math.cos(x)**2) + math.e**(-x**2) \
   #       + math.log(x)

   # x0 = 5.0550237
   # xs = [4.0550237, 4.3050237, 4.5550237, 4.8050237, 5.0550237, 5.3050237, 5.5550237, 5.8050237]
   # ordem = 2
#--------------------------------------------------------------------------
#--------------------------------------------------------------------------
#EX 39
   # def f(x):
   #    return math.cos(x+math.sqrt(math.log(x**2)))

   # x0 = 5.8732847
   # xs = [1.4550466, 3.0917464, 4.1036354, 4.5088767, 5.8061679, 6.129488, 7.2696293]
   # ordem = 3
#--------------------------------------------------------------------------
#--------------------------------------------------------------------------
#EX 40
   # def f(x):
   #    return math.cos(math.sin(math.log(x**2)))

   # x0 = 2.1345324
   # xs = [1.5345324, 1.6845324, 1.8345324, 1.9845324, 2.1345324, 2.2845324, 2.4345324, 2.5845324]
   # ordem = 4
#--------------------------------------------------------------------------
#--------------------------------------------------------------------------
#EX 41
   # def f(x):
   #    return math.sin(math.sqrt(math.pi + x**2))

   # x0 = 1.4161808
   # xs = [-1.7521145, -0.9376508, -0.2205482, 0.3958326, 1.0063393, 1.167232, 1.715525, 2.7313112, 3.2559937, 3.4786855, 4.4160535, 5.0114676, 5.6678806, 5.8725373, 6.6346092]
   # ordem = 5
#--------------------------------------------------------------------------
